/*
 * AUTOMATED MICROSCOPY - FIND OBJECTS
 * 
 * Version of intelligent acquisition that scans area defined by the current Position List (explorePositionList), e.g. generated by either "Create Grid" or utilising "HCS Site Generator" plugin
 * 
 * - go to position in position list
 * - exploration acquisition
 * - analyse image to find objects
 * - if objects are found:
 * 	add positions to objectPositionList
 * 	
 * - if nCounts < nObjects, go to next position in explorePositionList
 * 
 * - when finished, sets objectPositionList to current Position List for subsequent MDA imaging 
 * 
 * Notes
 * 	- requires a list of positions to search
 * 	- ImageJ macro to analyse exploration images and generate a list of XY coordinates
 * 	- exploration imaging MDA protocol, not include multi-XY positions (that is built-in to script)
 * 	- autofocus recommended if focus position is not defined in explorePositionList
 * 	- a pre-defined offset can be applied to the found positions if different objectives are used for exploration and imaging. Alternatively, this can be done after using the MicroManager Stage Position List window
 * 	
 * Matthew J. Renshaw
 * CALM-STP
 * The Francis Crick Institute
 * June 2018
 * matt.renshaw@crick.ac.uk
 * 
 */
 
import ij.ImagePlus;
import ij.IJ;
import org.micromanager.api.MMWindow;
import org.micromanager.PositionList;
import org.micromanager.MultiStagePosition;
import org.micromanager.StagePosition;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MANUAL VARIABLES TO BE EDITED
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// target number of objects to find
	int nObjects = 400; // number of objects to find

	boolean recordZ = false;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SYSTEM SPECIFIC SETTINGS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	// stage direction
	xDirect = 1;
	yDirect = -1;

	// offset to apply to position list, e.g. for change of objective for imaging acquisition. Note: offsets can be to the final position list if preferred
	objOffsetX = 0;
	objOffsetY = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SELECT ACQUISITION SETTINGS AND ANALYSIS MACROS USING DIALOG WINDOWS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// exploration acquisition settings
	ij.IJ.showMessage("select EXPLORATION acquisition settings");
	exploreMDA = ij.IJ.getFilePath("select EXPLORATION acquisition settings");

	// analysis macro to find objects
	ij.IJ.showMessage("select analysis macro (find objects)");
	analysisMacro1 = ij.IJ.getFilePath("select analysis macro (find objects)");


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GLOBAL VARIABLES TO BE INITIATED
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	mmc = mm.getCore();
	acquisitionManager = mm.getAcquisitionManager();
	displayManager = mm.getDisplayManager();
	
	// get devices
	xyStage = mmc.getXYStageDevice();
	focusDevice = mmc.getFocusDevice();

	// get position lists
	PositionList explorePositionList = 	mm.getPositionList();
	PositionList objectPositionList = new PositionList();

	// initialise variables
	nPositions = explorePositionList.getNumberOfPositions();
	nCounts = 0;
	stop = false;

	// load acquistion sequence settings
	exploreSettings = acquisitionManager.loadSequenceSettings(exploreMDA);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EXPLORATION PHASE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	displayManager.closeAllDisplayWindows(true); // close all display windows to free up memory, should prompt to save unsaved images

	while (!stop) {
		
		// check for exploration positions
		if (! (nPositions > 0.0)) {
			JOptionPane.showMessageDialog(null, "Please define position list for exploration");
			stop = true; // aborts if current Position List (explorePositionList) is empty
			return;
		}
		else {
			// search explorePositionList for objects of interest
			for (i = 0; i < nPositions; i++){

				if (! (nObjects > nCounts)){
					JOptionPane.showMessageDialog(null, "Search area finished, " + nCounts + " objects found");
					mm.positions().setPositionList(objectPositionList);
					stop = true;
					return;
				}
				else {
					// go to exploration position
					pos = explorePositionList.getPosition(i);
					MultiStagePosition msp = new MultiStagePosition();
					msp.goToPosition(pos, mmc);
					mmc.sleep(500);

					// exploration acquisition
					explorationDatastore = acquisitionManager.runAcquisitionWithSettings(exploreSettings, true); // exploration image acquisition
					
					// get image dimensions
					int imageWidth = mmc.getImageWidth();
					int imageHeight = mmc.getImageHeight();
					double pixelSizeMicron = mmc.getPixelSizeUm();
					int imageWidthMicron = imageWidth * pixelSizeMicron;
					int imageHeightMicron = imageHeight * pixelSizeMicron;

					// check for pixel calibration
					if (! (pixelSizeMicron > 0.0)) {
						JOptionPane.showMessageDialog(null, "Pixel size calibration is required for intelligent acquisition");
						stop = true;
						return;
					}

					// count number of objects found
					ij.IJ.runMacroFile(analysisMacro1); // analyse image
					mmc.sleep(200);
					displayManager.closeDisplaysFor(explorationDatastore);
					
					res = ij.measure.ResultsTable.getResultsTable(); // get imagej results table
					counter = res.getCounter(); // objects found in this field
					nCounts = nCounts + counter; // update total objects found, nCounts

					xPos = mmc.getXPosition(xyStage);
					yPos = mmc.getYPosition(xyStage);
					zPos = mmc.getPosition(focusDevice);

					mm.scripter().message("Exploration at position "+ i +"/"+ nPositions +": " + xPos + ", " + yPos + ", found " + counter + " objects. Total objects found = " + nCounts);
					
					// mark positions of found objects
					if (counter > 0.0) {
						for (j = 0; j < counter; j++){

							// get object coordinates
							xObj = res.getValue("X", j);
							yObj = res.getValue("Y", j);
							xOffset = imageWidthMicron/2;
							yOffset = imageHeightMicron/2;

							// add stage position to objectPositionList
							MultiStagePosition msp = new MultiStagePosition();
							StagePosition ssp = new StagePosition();
							ssp.stageName = xyStage;
							ssp.numAxes = 2;
							ssp.x = xPos + xDirect * (xObj - xOffset) + objOffsetX;
							ssp.y = yPos + yDirect * (yObj - yOffset) + objOffsetY;
							msp.add(ssp);
							
							if(recordZ){
								StagePosition zsp = new StagePosition();
								zsp.stageName = focusDevice;
								zsp.numAxes = 1;
								zsp.x = zPos;
								msp.add(zsp);
								msp.setDefaultZStage(focusDevice);
							}
							
							msp.setLabel("Explore_" + i + "_Object_" + (j + nCounts));
							objectPositionList.addPosition(msp);
						
						}				
					} 
				}
			}
			
			// exit when searched all exploration positions
			JOptionPane.showMessageDialog(null, "Search area finished, " + nCounts + " objects found");
			mm.positions().setPositionList(objectPositionList);
			stop = true;
			return; 
		}
	}


		
		